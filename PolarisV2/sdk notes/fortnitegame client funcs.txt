void AFortDecoTool::ClientDestroyDecoPreview()
void AFortGameState::Client_InitiateEndOfDayRecap(const struct FEndOfDayRecap& EndOfDayRecap)
void AFortLobbyBeaconClient::ClientCreateOrJoinChatRoom(const struct FString& ChatRoomId)
void AFortLobbyBeaconClientRM::ClientBroadcastLobbyPlayerPadTop(const struct FUniqueNetIdRepl& ReadiedPlayer, bool bIsReadiedUp)
void AFortPartyBeaconClient::ClientAbandonResponse(TEnumAsByte<EPartyReservationResult> ReservationResponse)
void AFortPartyBeaconClient::ClientAllowedToProceedFromReservation()
void AFortPartyBeaconClient::ClientAllowedToProceedFromReservationTimeout()
void AFortPartyBeaconClient::ClientReconnectResponse(TEnumAsByte<EPartyReservationResult> ReservationResponse)
void AFortPawn::ClientInternalEquipWeapon(class AFortWeapon* Weap)
void AFortPlayerController::ClientAddHeroSpecialization(class UFortHeroSpecialization* NewSpecialization)
void AFortPlayerController::ClientAddScoreNumber(int Score, EStatCategory ScoreCategory, const struct FVector_NetQuantize& ScoreLocation, bool bDisplayScoreOnPlayer)
void AFortPlayerController::ClientCancelCrafting()
void AFortPlayerController::ClientCreateOrJoinChatRoom(const struct FString& ChatRoomId)
void AFortPlayerController::ClientDrawAttentionToUI(const struct FGuid& MissionGuid, const struct FGameplayTagContainer& ObjectiveHandle)
void AFortPlayerController::ClientExecuteInventoryItem(const struct FGuid& ItemGuid, float Delay, bool bForceExecute)
void AFortPlayerController::ClientFinishedInteractionInZone()
void AFortPlayerController::ClientForceCancelBuildingTool()
void AFortPlayerController::ClientForceProfileQuery()
void AFortPlayerController::ClientGivePlayerLocalAccountItem(class UFortAccountItemDefinition* ItemDefinition, int Count)
void AFortPlayerController::ClientJoinConsoleSession(const struct FString& ConsoleSession)
void AFortPlayerController::ClientOnGenericPlayerInitialization()
void AFortPlayerController::ClientOpenChoiceUI(const struct FChoiceData& ChoiceItems)
void AFortPlayerController::ClientPingMinimap(const struct FVector& WorldLocation, const struct FLinearColor& PingColor)
void AFortPlayerController::ClientReadyCheckComplete(bool bPassed)
void AFortPlayerController::ClientReceivePresetTeamChat(const struct FText& ChatText, const struct FUniqueNetIdRepl& SenderID)
void AFortPlayerController::ClientReceivedAttributeSources(const struct FGameplayAttribute& Attribute, class UFortAbilitySystemComponent* AbilitySystemComponent, TArray<struct FAttributeModifierInfo> Sources)
void AFortPlayerController::ClientRegisterWithParty()
void AFortPlayerController::ClientReportDamagedResourceBuilding(class ABuildingSMActor* BuildingSMActor, TEnumAsByte<EFortResourceType> PotentialResourceType, int PotentialResourceCount, bool bDestroyed, bool bJustHitWeakspot)
void AFortPlayerController::ClientRequestReadyCheck(const struct FText& QueryText, const struct FText& YesText, const struct FText& NoText)
void AFortPlayerController::ClientSendMessage(const struct FText& MESSAGE)
void AFortPlayerController::ClientSetActionMappingEnabled(const struct FName& ActionName, bool bEnabled)
void AFortPlayerController::ClientSetInviteFlags(const struct FJoinabilitySettings& Settings)
void AFortPlayerController::ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation)
void AFortPlayerController::ClientStayWithParty(bool bStayWithParty)
void AFortPlayerController::ClientStopUIFeedbackEvent(const struct FName& EventName)
void AFortPlayerController::ClientTriggerUIFeedbackEvent(const struct FName& EventName)
void AFortPlayerController::ClientUpdateRichPresence(ERichPresenceStateChange RichPresenceChange, bool bImportant)
void AFortPlayerControllerAthena::ClientBotStartDogpile(const struct FVector& DogpilePosition)
void AFortPlayerControllerAthena::ClientBotStopDogpile()
void AFortPlayerControllerAthena::ClientNotifyTeamWon()
void AFortPlayerControllerAthena::ClientNotifyWon()
void AFortPlayerControllerAthena::ClientSendEndBattleRoyaleMatchForPlayer(bool bSuccess, const struct FAthenaRewardResult& Result)
void AFortPlayerControllerAthena::ClientStreamOutBuildingFoundation(class ABuildingFoundation* FoundationActor)
void AFortPlayerControllerAthena::ClientUnreliableSendMessage(const struct FText& MESSAGE)
void AFortPlayerControllerAthena::ClientVoiceChatChannelJoin(const struct FString& InVoiceChatPlayerName, const struct FString& InVoiceChatChannel, const struct FString& JoinToken)
void AFortPlayerControllerAthena::ClientVoiceChatLogin(const struct FString& InVoiceChatPlayerName, const struct FString& LoginToken)
void AFortPlayerControllerDeployableBase::ClientOnHordeTierComplete(EFortCompletionResult Result)
void AFortPlayerControllerDeployableBase::ClientOnHordeTierInitialized(TArray<struct FItemAndCount> Items)
void AFortPlayerControllerDeployableBase::ClientOnHordeWaveComplete(int Wave, TArray<struct FItemAndCount> Rewards)
void AFortPlayerControllerKeep::ClientSetPermaniteAvailability(bool bAvailable)
void AFortPlayerControllerKeep::ClientUnloadFoundations()
void AFortPlayerControllerManor::ClientOpenManorPortalUnlockMenu(class AManorPortal* ManorPortal)
void AFortPlayerControllerOutpost::ClientOnBuildingLevelChanged(class UFortOutpostItemDefinition* UpgradedBuilding, int InLevelBeforeUpgrade)
void AFortPlayerControllerOutpost::ClientOnOutpostRefundOccurred()
void AFortPlayerControllerPvP::ClientReceiveKillNotification(class AFortPlayerStateZone* Killer, class AFortPlayerStateZone* Killed)
void AFortPlayerControllerPvP::ClientShowGameOverWidget(TEnumAsByte<EFortPvPGameResult> GameResult)
void AFortPlayerControllerZone::ClientOnPawnDied(const struct FFortPlayerDeathReport& DeathReport)
void AFortPlayerControllerZone::ClientOnPawnRevived(class AController* EventInstigator)
void AFortPlayerControllerZone::ClientOnPawnSpawned()
void AFortPlayerControllerZone::ClientOnZoneEndScoreReports(TArray<struct FFortPlayerScoreReport> ScoreReports)
void AFortPlayerControllerZone::ClientSendPartyJoinInfoToPlayer(const struct FString& JoinInfoStr)
void AFortPlayerPawn::ClientNotifyAbilityFailed(class UGameplayAbility* FailedAbility, const struct FGameplayTagContainer& FailedReason)
void AFortPlayerStateAthena::ClientReportDBNO(const struct FString& DBNOPlayersName)
void AFortPlayerStateAthena::ClientReportKill(const struct FString& KilledPlayersName)
void AFortWeapon::ClientGivenTo(class APawn* P)
void AFortWeapon::ClientReportShotFlags(uint32_t ShotFlags, int ShotIndex)
void UFortMcpProfileQuest::ClientQuestLogin(struct FClientUrlContext* Context)