bool UFortInteractInterface::ServerOnAttemptInteract(const struct FInteractionType& InteractType)
void AFortCustomizableAbilityDecoTool::ServerPressSecondaryFire()
void AFortCustomizableAbilityDecoTool::ServerPressTrigger()
void AFortCustomizableAbilityDecoTool::ServerReleaseSecondaryFire()
void AFortCustomizableAbilityDecoTool::ServerReleaseTrigger()
void AFortDecoTool::ServerSpawnDeco(const struct FVector& Location, const struct FRotator& Rotation, class ABuildingSMActor* AttachedActor)
void AFortGameStateZone::ServerFireAIDirectorEvent(EFortAIDirectorEvent Event, class UObject* EventSource, class UObject* EventTarget, float EventMultiplier)
void AFortGameStateZone::ServerFireAIDirectorEventBatch(TArray<struct FFortAIDirectorEvent> Payload)
void AFortLobbyBeaconClient::ServerIncrementHomeBaseVersion(const struct FUniqueNetIdRepl& InUniqueId)
void AFortLobbyBeaconClient::ServerSetCharacterGender(const struct FUniqueNetIdRepl& InUniqueId, TEnumAsByte<EFortCustomGender> GenderType)
void AFortLobbyBeaconClient::ServerSetConsoleUniqueNetId(const struct FUniqueNetIdRepl& InUniqueId, const struct FName& NewConsoleOSS, const struct FUniqueNetIdRepl& NewConsoleNetId)
void AFortLobbyBeaconClient::ServerSetCurrentCharacterXp(const struct FUniqueNetIdRepl& InUniqueId, int CurrentCharacterXp)
void AFortLobbyBeaconClient::ServerSetGadget(const struct FUniqueNetIdRepl& InUniqueId, int Index, const struct FString& GadgetPersistentName)
void AFortLobbyBeaconClient::ServerSetHeroId(const struct FUniqueNetIdRepl& InUniqueId, const struct FString& InHeroId)
void AFortLobbyBeaconClient::ServerSetHeroSquadId(const struct FUniqueNetIdRepl& InUniqueId, const struct FName& InHeroSquadId)
void AFortLobbyBeaconClient::ServerSetHeroType(const struct FUniqueNetIdRepl& InUniqueId, class UFortHeroType* InHeroType)
void AFortLobbyBeaconClient::ServerSetMatchmakingLevel(const struct FUniqueNetIdRepl& InUniqueId, int MatchmakingLevel)
void AFortLobbyBeaconClient::ServerTeamChatRoomReady(const struct FString& ChatRoomId)
void AFortLobbyBeaconClientPvP::ServerReadyUp()
void AFortLobbyBeaconClientRM::ServerUpdateNewlyJoinedPlayerInternal()
void AFortLobbyBeaconClientRM::ServerUpdateReadyStatus(bool bIsReady)
void AFortPartyBeaconClient::ServerAbandonExistingReservation(const struct FString& InSessionId, const struct FUniqueNetIdRepl& RequestingPlayer)
void AFortPartyBeaconClient::ServerEmptyServerReservationRequest(const struct FString& InSessionId, const struct FEmptyServerReservation& ReservationData, const struct FPartyReservation& Reservation)
void AFortPartyBeaconClient::ServerReconnectExistingReservation(const struct FString& InSessionId, const struct FUniqueNetIdRepl& RequestingPlayer)
void AFortPawn::ServerInternalEquipWeapon(class AFortWeapon* Weap)
void AFortPawn::ServerTeleportNearLocation(const struct FVector& ActorLocation)
void AFortPlayerController::ServerAnnouncementStoppedOnClient(const struct FGuid& AnnouncementID)
void AFortPlayerController::ServerAttemptInteract(class AActor* ReceivingActor, class UPrimitiveComponent* InteractComponent, TEnumAsByte<ETInteractionType> InteractType)
void AFortPlayerController::ServerAttemptPinSchematic(const struct FString& ItemId, bool bSave)
void AFortPlayerController::ServerAttemptUnpinSchematic(const struct FString& ItemId, bool bSave)
void AFortPlayerController::ServerBeginEditingBuildingActor(class ABuildingSMActor* BuildingActorToEdit)
void AFortPlayerController::ServerBroadcastUIFeedbackEvent(const struct FName& EventName)
void AFortPlayerController::ServerCheat(const struct FString& Msg)
void AFortPlayerController::ServerCheatAll(const struct FString& Msg)
void AFortPlayerController::ServerClientPawnLoaded(bool bIsPawnLoaded)
void AFortPlayerController::ServerCraftSchematic(const struct FString& ItemId, int PostCraftSlot, bool bIsQuickCrafted)
void AFortPlayerController::ServerCreateAIDirectorDataManager()
void AFortPlayerController::ServerCreateBuildingActor(const struct FBuildingClassData& BuildingClassData, const struct FVector_NetQuantize10& BuildLoc, const struct FRotator& BuildRot, bool bMirrored)
void AFortPlayerController::ServerCreateCombatManager()
void AFortPlayerController::ServerDeployDefender(class ABuildingTrapDefender* DefenderTrap, const struct FString& SelectedItemInstanceId, const struct FName& DefenderSquadId, const struct FGuid& WeaponToGiveGuid, int AmmoQuantity)
void AFortPlayerController::ServerDisassembleInventoryItem(const struct FGuid& ItemGuid)
void AFortPlayerController::ServerDropCarriedObject()
void AFortPlayerController::ServerEditBuildingActor(class ABuildingSMActor* BuildingActorToEdit, class UClass* NewBuildingClass, int RotationIterations, bool bMirrored)
void AFortPlayerController::ServerEmote(const struct FName& AssetName)
void AFortPlayerController::ServerEndEditingBuildingActor(class ABuildingSMActor* BuildingActorToStopEditing)
void AFortPlayerController::ServerExecuteInventoryItem(const struct FGuid& ItemGuid)
void AFortPlayerController::ServerExecutePresetTeamChat(const struct FText& ChatText, const struct FUniqueNetIdRepl& SenderID)
void AFortPlayerController::ServerFinishedInteractionInZoneReport(int FinishedInteractionState, TArray<uint64_t> FinishedInteractionReport)
void AFortPlayerController::ServerGiftInventoryItemToOtherPlayer(const struct FGuid& ItemGuid, const struct FUniqueNetIdRepl& PlayerID, int Quantity)
void AFortPlayerController::ServerHandleMissionEvent_StartLeavingZone(class AFortPlayerPawn* PlayerRequestingLeaving)
void AFortPlayerController::ServerHandleMissionEvent_ToggledCursorMode(class AFortPlayerController* PlayerThatToggledCursorMode, bool bOpened)
void AFortPlayerController::ServerHandleMissionEvent_ToggledEditMode(class AFortPlayerController* PlayerThatToggledEditMode, class ABuildingSMActor* EditableActor, bool bOpened)
void AFortPlayerController::ServerItemWillBeDestroyed(const struct FGuid& DestroyedItemGuid, int Count)
void AFortPlayerController::ServerKickPlayer(const struct FUniqueNetIdRepl& PlayerToKick, const struct FText& Reason)
void AFortPlayerController::ServerKillAllAIPawnsAroundPlayer()
void AFortPlayerController::ServerLoadingScreenDropped()
void AFortPlayerController::ServerModDurability(const struct FGuid& ItemGuid, float DurabilityMod, bool bForceSet)
void AFortPlayerController::ServerModifyStat(const struct FName& StatName, int Amount, TEnumAsByte<EStatMod> ModType, bool bForceStatSave)
void AFortPlayerController::ServerPingMinimap(const struct FVector& WorldLocation, const struct FLinearColor& PingColor, TEnumAsByte<EFortTeam> RequiredTeam)
void AFortPlayerController::ServerPlayEmoteItem(class UFortMontageItemDefinitionBase* EmoteAsset)
void AFortPlayerController::ServerReadyToStartMatch()
void AFortPlayerController::ServerReleaseInventoryItemKey(EFortQuickBars InQuickBar, int Slot)
void AFortPlayerController::ServerRemoveDefender(class ABuildingTrapDefender* DefenderTrap)
void AFortPlayerController::ServerRemoveInventoryItem(const struct FGuid& ItemGuid, int Count, bool bForceRemoveFromQuickBars)
void AFortPlayerController::ServerRemoveInventoryStateValue(const struct FGuid& ItemGuid, TEnumAsByte<EFortItemEntryState> StateValueType)
void AFortPlayerController::ServerRepairBuildingActor(class ABuildingSMActor* BuildingActorToRepair)
void AFortPlayerController::ServerReplyToReadyCheck(bool bReady)
void AFortPlayerController::ServerReportClientFPS(float ClientAvgFPS, unsigned char ClientAvgFrameScore, unsigned char ClientMaxFrameScore)
void AFortPlayerController::ServerRequestAIDebug()
void AFortPlayerController::ServerRequestAttributeSources(const struct FGameplayAttribute& Attribute, class UFortAbilitySystemComponent* AbilitySystemComponent)
void AFortPlayerController::ServerRequestGameplayAction(TEnumAsByte<EFortRequestedGameplayAction> RequestedAction)
void AFortPlayerController::ServerReturnToMainMenu()
void AFortPlayerController::ServerSetAutoEquipBetterItems(bool bAutoEquip)
void AFortPlayerController::ServerSetClientHasFinishedLoading(bool bInHasFinishedLoading)
void AFortPlayerController::ServerSetHero(const struct FString& NewHeroID)
void AFortPlayerController::ServerSetInventoryStateValue(const struct FGuid& ItemGuid, const struct FFortItemEntryStateValue& StateValue)
void AFortPlayerController::ServerSetMarkText(class AFortMarkActor* MarkActor, const struct FString& MarkText)
void AFortPlayerController::ServerSetPartyOwner(const struct FUniqueNetIdRepl& PartyOwnerUniqueId)
void AFortPlayerController::ServerSetReadyToContinue(bool bReady, TEnumAsByte<EFortGameplayState> RequestedState, bool bTryStartTimer)
void AFortPlayerController::ServerSetTimeOfDay(float TimeOfDay)
void AFortPlayerController::ServerSetupWeakSpotsOnBuildingActor(class ABuildingSMActor* BuildingActor, const struct FFortCrackEffectData& CrackData)
void AFortPlayerController::ServerSpawnInventoryDrop(const struct FGuid& ItemGuid, int Count)
void AFortPlayerController::ServerSpawnMark(class AActor* ActorToAttachTo, const struct FVector& AttachOffset, const struct FText& PreapprovedText)
void AFortPlayerController::ServerSpotActor(class AActor* NewlySpottedActor)
void AFortPlayerController::ServerStartIntensityGraphing()
void AFortPlayerController::ServerStartPIDContributionsGraphing()
void AFortPlayerController::ServerStartPIDValueGraphing()
void AFortPlayerController::ServerSuicide()
void AFortPlayerController::ServerTeamChatRoomReady(const struct FString& ChatRoomId)
void AFortPlayerController::ServerTeleportToReticle(const struct FVector& TeleportLocation)
void AFortPlayerController::ServerTouchActiveTime()
void AFortPlayerController::ServerTriggerCombatEvent(TEnumAsByte<EFortCombatEvents> TriggeredEvent, float HeatMultiplier)
void AFortPlayerController::ServerTriggerCombatEventBatch(TArray<struct FFortCombatManagerEvent> Payload)
void AFortPlayerController::ServerTriggerGenericObjectiveEvent(class AFortObjectiveBase* Objective)
void AFortPlayerController::ServerUIChoiceCompleted(int ChosenItem, int MenuIdentifier)
void AFortPlayerController::ServerUpgradeBuildingActor(class ABuildingActor* BuildingActorToUpgrade, int NewUpgradeLevel)
void AFortPlayerControllerAthena::ServerAttemptAircraftJump(const struct FRotator& ClientRotation)
void AFortPlayerControllerAthena::ServerAttemptEnterExitCar()
void AFortPlayerControllerAthena::ServerDBNOReviveInterrupted(class AFortPlayerPawnAthena* DBNOPawn)
void AFortPlayerControllerAthena::ServerDBNOReviveStarted(class AFortPlayerPawnAthena* DBNOPawn)
void AFortPlayerControllerAthena::ServerFollowNextTeammate()
void AFortPlayerControllerAthena::ServerPlaceMapCursor(const struct FVector_NetQuantize& CursorPos)
void AFortPlayerControllerAthena::ServerRemoveMapCursor()
void AFortPlayerControllerAthena::ServerVoiceChatReconnected()
void AFortPlayerControllerAthena::ServerVoiceChatRejoinChannel()
void AFortPlayerControllerDeployableBase::ServerMoveAllItemsFromDeployableBase(class ADeployableBasePlot* ExpectedPlot)
void AFortPlayerControllerDeployableBase::ServerMoveAllItemsToDeployableBase(class ADeployableBasePlot* ExpectedPlot)
void AFortPlayerControllerDeployableBase::ServerMoveItemFromDeployableBase(const struct FGuid& ItemOnPlot, int Count, class ADeployableBasePlot* ExpectedPlot)
void AFortPlayerControllerDeployableBase::ServerMoveItemToDeployableBase(const struct FGuid& ItemOnPlayer, int Count, class ADeployableBasePlot* ExpectedPlot)
void AFortPlayerControllerFOB::ServerAttemptSelectFOBCore(class ABuildingFOBConfigActor* FOBToSelectOn, class UFortFOBCoreDecoItemDefinition* DefToSelect)
void AFortPlayerControllerFOB::ServerReloadFOB(class ABuildingFOBConfigActor* FOBToReload)
void AFortPlayerControllerFOB::ServerResetFOB(class ABuildingFOBConfigActor* FOBToReset)
void AFortPlayerControllerFOB::ServerSaveFOB(class ABuildingFOBConfigActor* FOBToSave)
void AFortPlayerControllerManor::ServerOnUnlockPortalComplete(class AManorPortal* ManorPortal)
void AFortPlayerControllerOutpost::ServerAbortDisintegration()
void AFortPlayerControllerOutpost::ServerActivateCraftingTable()
void AFortPlayerControllerOutpost::ServerDeactivateCraftingTable()
void AFortPlayerControllerOutpost::ServerDepositPOSTResource(const struct FGuid& ItemGuid, int Count)
void AFortPlayerControllerOutpost::ServerDisintegrateItem(const struct FGuid& ItemGuid, int Count)
void AFortPlayerControllerOutpost::ServerFabricateItem(class UFortWorldItemDefinition* ItemDef)
void AFortPlayerControllerOutpost::ServerLeaveOutpostAsParty()
void AFortPlayerControllerOutpost::ServerNotifyPendingFabricationCompleted()
void AFortPlayerControllerOutpost::ServerUpgradeBuilding(class UFortOutpostItemDefinition* BuildingToUpgrade)
void AFortPlayerControllerOutpost::ServerUpgradePOST()
void AFortPlayerControllerPvP::ServerAttemptSelectFOBCore(class ABuildingFOBConfigActor* FOBToSelectOn, class UFortFOBCoreDecoItemDefinition* DefToSelect)
void AFortPlayerControllerZone::ServerSendLoadoutConfig(int LoadoutSeed, TArray<unsigned char> Loadout)
void AFortPlayerControllerZone::ServerSendPartyJoinInfoToPlayer(const struct FUniqueNetIdRepl& RecipientId, const struct FString& JoinInfoStr)
void AFortPlayerControllerZone::ServerSetShouldDisablePlayerTeleportingDuringMissionResults()
void AFortPlayerControllerZone::ServerSubmitGameplayVote(int VoteDecision)
void AFortPlayerControllerZone::ServerTriggerSetupTeleportCameraEvent()
void AFortPlayerPawn::ServerChooseGender(TEnumAsByte<EFortCustomGender> Gender)
void AFortPlayerPawn::ServerChoosePart(TEnumAsByte<EFortCustomPartType> Part, class UCustomCharacterPart* ChosenCharacterPart)
void AFortPlayerPawn::ServerCycleAccessoryColorSwatch(TEnumAsByte<EFortCustomPartType> Part, bool bNext)
void AFortPlayerPawn::ServerCycleColorSwatch(TEnumAsByte<EColorSwatchType> SwatchType, bool bNext)
void AFortPlayerPawn::ServerCyclePart(TEnumAsByte<EFortCustomPartType> Part, bool bNextPart)
void AFortPlayerPawn::ServerHandlePickup(class AFortPickup* Pickup, float InFlyTime, const struct FVector& InStartDirection, bool bPlayPickupSound)
void AFortPlayerPawn::ServerPlayUnableToPerformActionMontage()
void AFortPlayerPawn::ServerRespawnFromDBNO()
void AFortPlayerPawn::ServerReviveFromDBNO(class AController* EventInstigator)
void AFortPlayerPawn::ServerRootMotionInterruptNotifyStopMontage(class UAnimMontage* MontageToStop)
void AFortPlayerPawn::ServerSendAimbotDetectionStatus(TArray<unsigned char> Payload)
void AFortPlayerPawn::ServerSetAimbotDetection(bool bEnableDetection)
void AFortPlayerPawn::ServerToggleBodyType()
void AFortPlayerPawn::ServerToggleGender()
void AFortPlayerState::ServerSetShowHeroBackpack(bool bShow)
void AFortPlayerState::ServerSetShowHeroHeadAccessories(bool bShow)
void AFortPlayerStateOutpost::ServerSetCanEditOutpost(class AFortPlayerStateOutpost* InPlayer, bool bCanEdit)
void AFortProjectileAthena::ServerNotifyPawnHit(const struct FHitResult& Hit)
void AFortQuickBars::ServerActivateSlotInternal(EFortQuickBars InQuickBar, int Slot, float ActivateDelay, bool bUpdatePreviousFocusedSlot)
void AFortQuickBars::ServerAddItemInternal(const struct FGuid& Item, EFortQuickBars InQuickBar, int Slot)
void AFortQuickBars::ServerRemoveItemInternal(const struct FGuid& Item, bool bFindReplacement, bool bForce)
void AFortQuickBars::ServerSwapItemsInternal(EFortQuickBars QuickBarA, int SlotIndexA, EFortQuickBars QuickBarB, int SlotIndexB)
void AFortWeapon::ServerReleaseWeaponPrimaryAbility()
void AFortWeapon::ServerResetShotReport()
void AFortWeapon::ServerSetChargeState(unsigned char NewState)
void UFortAthenaHoverCarMovementComponent::ServerUpdateAthenaState(float InThrottleInput, float InSteeringInput, const struct FVector& InForwardVectorTarget)
void UFortMcpProfileQuest::ServerQuestLogin(const struct FString& MatchmakingSessionId, struct FDedicatedServerUrlContext* Context)